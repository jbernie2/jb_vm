{"version":3,"sources":["../src/js/jb_vm.js"],"names":[],"mappings":"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","file":"jb_vm-debug.js","sourcesContent":["const OPCODE_OFFSET = 24;\nconst DEST_REG_OFFSET = 20;\nconst SRC_REG_1_OFFSET = 16;\nconst SRC_REG_2_OFFSET = 12; \nconst CONSTANT_OFFSET = 0;\n\n//look up OPCODE names by value\nconst OPCODE_NAMES = [\n  \"halt\" , // 0x00 //\n  \"add\"  , // 0x01 //\n  \"loadi\"  // 0x02 //\n];\n\n//look up OPCODE values by name\nconst OPCODE_VALUES = {\n  halt :0x00,\n  add  :0x01,\n  loadi:0x02\n};\n\nconst REGISTERS = {\n  //general purpose registers\n  reg0:0x0,\n  reg1:0x1,\n  reg2:0x2,\n  reg3:0x3,\n  reg4:0x4,\n  reg5:0x5,\n  reg6:0x6,\n  reg7:0x7,\n\n  //special purpose registers\n  reg8:0x8,\n  reg9:0x9,\n  rega:0xa,\n  regb:0xb,\n  //pointer to video memory\n  vm:0xc,\n  //pointer to interupt handler\n  ih:0xd,\n  //stack pointer\n  sp:0xe,\n  //program counter\n  pc:0xf,\n};\n\nvar pc = 0;\nvar running = true;\nvar stack = [];\nvar registers = {\n  reg0:0,\n  reg1:1,\n  reg2:2,\n  reg3:3,\n  reg4:4,\n  reg5:5,\n  reg6:6,\n  reg7:7,\n\n  reg8:8,\n  reg9:9,\n  rega:10,\n  regb:11,\n  vm:12,\n  ih:13,\n  sp:14,\n  pc:0\n};\n\n\nvar halt = function(instr){\n  running = false;\n  console.log(\"halting\");\n};\n\nvar add = function(instr){\n  console.log(\"add\");\n};\n\nvar loadi = function(instr){\n  console.log(\"loadi\");\n};\n\nconst instructions = {\n  halt:halt,\n  loadi:loadi,\n  add:add\n};\n\nvar fetch = function(){\n  var next = memory[registers.pc];\n  registers.pc += 1;\n  return next;\n};\n\nvar decode = function(instr){\n  return {\n    opcode   : (instr & 0xFF000000) >>> OPCODE_OFFSET, \n    dest_reg : (instr & 0x00F00000) >>> DEST_REG_OFFSET,\n    src_reg_1: (instr & 0x000F0000) >>> SRC_REG_1_OFFSET,\n    src_reg_2: (instr & 0x0000F000) >>> SRC_REG_2_OFFSET,\n    constant : (instr & 0x0000FFFF) >>> CONSTANT_OFFSET\n  }; \n};\n\nvar evaluate = function(instr){\n   const op = OPCODE_NAMES[instr.opcode];\n   const execution_function = instructions[op];\n   execution_function(instr);\n};\n\nvar main = function(){\n  while(running){\n    evaluate(decode(fetch()));\n  }\n};\n\nvar pack_instruction = function(instruction){\n  const opcode    = instruction[0];\n  const dest_reg  = instruction[1];\n  const src_reg_1 = instruction[2];\n  const src_reg_2 = instruction[3];\n  const constant  = instruction[4];\n\n  var instr;\n  var reg;\n  if(opcode){\n    var op = OPCODE_VALUES[opcode];\n    instr = pack(instr,op,OPCODE_OFFSET);\n  }\n  if(dest_reg){\n    reg = REGISTERS[dest_reg];\n    instr = pack(instr,reg,DEST_REG_OFFSET);\n  } \n  if(src_reg_1){\n    reg = REGISTERS[src_reg_1];\n    instr = pack(instr,reg,SRC_REG_1_OFFSET);\n  }\n  if(src_reg_2){\n    reg = REGISTERS[src_reg_2];\n    instr = pack(instr,reg,SRC_REG_2_OFFSET);\n  }\n  if(constant){\n    instr = pack(instr,constant,CONSTANT_OFFSET);\n  }\n  return instr;\n};\n\nvar pack = function(instr,field,offset){\n  return instr | (field << offset);\n};\n\nvar memory = [\n  [\"loadi\", \"reg1\", null  , null  , 1],\n  [\"loadi\", \"reg2\", null  , null  , 2],\n  [\"add\"  , \"reg3\", \"reg1\", \"reg2\", null],\n  [\"halt\" , null  , null  , null  , null] \n].map(pack_instruction);\n\nmain();\n\nconsole.log(\"packing loadi reg1 5: \"+ pack_instruction([\"loadi\",\"reg1\",null,null,5]).toString(16));\n"]}